import "./Stdlib/CodeBlocks.simi"
import CodeBlocks

class NotDb:
    def init(classNames):
        @_db = $[]
        for className in classNames:
            @_db.(className) = $[]
        end
    end

    def setupSingleton(classNames):
        @singleton = NotDb(classNames)
        @singleton.insert(Brand(guid(), "Osjecko", 0.5))
        @singleton.insert(Brand(guid(), "Karlovacko", 0.5))
        @singleton.insert(Brand(guid(), "Ozujsko", 0.33))
    end

    def insert(obj): @_collection(obj).(obj.guid) = obj

    def delete(obj): @_collection(obj).(obj.guid) = nil

    def query(obj):
        if obj.isArray():
            collection = @_collection(obj.0)
            for o in obj:
                res = @_queryIndividual(o, collection)
                if res: return res
            end
            return nil
        end
        return @_queryIndividual(obj, @_collection(obj))
    end

    def queryAll(clazz): return @_db.(ClassCode(clazz).name).values()

    def find(className, guid): return @_db.(className).(guid)

    def findUser(request):
        cookie = request.headers.simicookie
        return ife(cookie, :@_queryIndividual([cookie = cookie], @_db.("User")), nil)
    end

    def _queryIndividual(obj, collection):
        if obj.guid: return [collection.(obj.guid)]
        matches = Object.array()
        for other in collection.values():
            $match = true
            for e in obj.enumerate():
                [key, value] = e
                if value != other.(key):
                    $match = false
                    break
                end
            end
            if $match: matches.append(other)
        end
        return matches
    end

    def _collection(obj): return @_db.(ClassCode(obj.("class")).name)
end
