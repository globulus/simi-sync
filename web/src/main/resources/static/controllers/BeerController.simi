import "./SimiSyncControllers.simi"
import "./db/DbHelper.simi"
import "./models/Beer.simi"

class BeerController:
    !SimiSyncControllers.Route("/beers", "GET")
    !SimiSyncControllers.ClientTask(1, nil, ["simiCookie"], nil, nil)
    def get(request):
        impl = def user:
            beers = DbHelper.orm().query(Beer).where("user = '\(user.guid)'").array()
            print "Found beers: " + ivic beers
            return beers.map(def b: b.clone()).forEach(def b: b.toClientModel())
        end
        return BeerController.checkAuth(impl)(request)
    end

    !SimiSyncControllers.Route("/beers", "PUT")
    !SimiSyncControllers.ClientTask(1, [Object], ["simiCookie"], nil, [201])
    def put(request):
        impl = def user:
            for beer in request.body:
                newBeer = Beer()
                newBeer.fromClientModel(beer)
                newBeer.setUser(user)
                DbHelper.orm().upsert(newBeer)
            end
            return [code = 201, body = ""]
        end
        return BeerController.checkAuth(impl)(request)
    end

    !SimiSyncControllers.Route("/beers/$guid", "DELETE")
    !SimiSyncControllers.ClientTask(1, [String], ["simiCookie"], nil, nil)
    def delete(request):
        impl = def user:
            beer = DbHelper.orm().query(Beer).where("guid = '\(request.path.guid)' and user = '\(user.guid)'").first()
            if beer:
                DbHelper.orm().delete(beer)
                return ""
            end
            else: return [code = 400, body = "Unable to delete"]
        end
        return BeerController.checkAuth(impl)(request)
    end

    def checkAuth(f):
       wrapper = def request:
        print request
           user = DbHelper.findUser(request)
           print "got user " + user
           if user: return f(user)
           return [code = 401, body = "Unauthorized"]
       end
       return wrapper
   end
end
