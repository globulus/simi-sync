import "./Stdlib/File.simi"
import "./Stdlib/CodeBlocks.simi"
import "./SimiSyncCommons.simi"

class_ SimiSyncControllers:

    class_ Route:
        def init(endpoint, verb): pass
    end

    class_ Request:
        def init(headers, body): @init(headers, body, nil, nil)
        def init(headers, body, query): @init(headers, body, query, nil)
        def init(headers, body, query, path): pass
    end

    class_ Router:
        import SimiSyncCommons.Parser

        def parseControllers(resourceLoaderWrapper):
            # By convention, all controller files should live in a directory named "controller" and its subdirectories
            router = $[]
            for file in File.listAll("static/controllers", "simi", true, resourceLoaderWrapper):
                # Read and interpret the content of the file
                controllerCode = File.readString(file.path)
                controllerClass = gu @removeImports(controllerCode)
                for e in controllerClass.enumerate().filter(def e: e.value is Function):
                    value = controllerClass.(e.key)
                    route = @extractAnnot(value, SimiSyncControllers.Route)
                    if not route: continue
                    verb = route.verb
                    if verb not in router: router.(verb) = $[]
                    router.(verb).(route.endpoint) = value
                end
            end
            @router = router
        end

        def route(endpoint, verb, headers, query, body):
            queryObj = @_parseQuery(query)
            route = SimiSyncControllers.Route(endpoint, verb)
            print "Routing: " + route
            match = @_matchRoute(route)
            print "Found route: " + match
            if match is Function: return match(SimiSyncControllers.Request(headers, body, queryObj))
            return match.func(SimiSyncControllers.Request(headers, body, queryObj, match.path))
        end

        def _matchRoute(route):
            for e in @router.(route.verb).enumerate():
                [endpoint, func] = e
                path = route.endpoint
                if endpoint == path: return func
                endpointSplit = endpoint.split('/')
                pathSplit = path.split('/')
                if endpointSplit.len() != pathSplit.len(): continue

                # Check for matches amongst paths with components
                $matches = true
                pathObj = $[]
                for ee in endpointSplit.enumerate():
                    [i, component] = ee
                    pathComponent = pathSplit.(i)
                    pathObj.clear()
                    if component.startsWith('$'): pathObj.(component.substring(1)) = pathComponent # Remove starting $
                    elsif component != pathComponent:
                        $matches = false
                        break
                    end
                end
                if $matches: return [func = func, path = pathObj]
            end
            return nil
        end

        def _parseQuery(query):
            if not query: return []
            queryObj = $[]
            for comp in query.split('&'):
                index = comp.indexOf('=')
                queryObj.(comp.substring(0, index)) = comp.substring(index + 1)
            end
            return queryObj
        end
    end
end
