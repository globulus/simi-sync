import "./Stdlib/File.simi"
import "./Stdlib/CodeBlocks.simi"
import "./SimiSyncCommons.simi"
import "./db/NotDb.simi"

class_ SimiSyncModels:

    # Model annotation class
    class_ Model:
        def init(version): pass
    end

    # Model field annotation class
    class_ Field:
        def init(): @init(false, 1)
        def init(serverOnly): @init(serverOnly, 1)
        def init(serverOnly, version): pass
        def init(serverOnly, version, clientMapper): pass
        def init(serverOnly, version, clientMapper, clientName): pass
    end

    # ClienrMapper usually maps an object to a simpler data type, such as string
    class ClientMapper:
        def init(type, from, to): pass
    end

    # Model method annotation class
    class_ Method:
    end

    class_ ModelParser():
        import SimiSyncCommons.Parser

        def parse(version, resourceLoaderWrapper):
            import CodeBlocks
            # By convention, all model files should live in a directory named "models" and its subdirectories
            $dirPath = nil
            dbClassNames = Object.array()
            for file in File.listAll("static/models", "simi", true, resourceLoaderWrapper):
                if not $dirPath:
                    $dirPath = file.path.substring(0, file.path.lastIndexOf('/') + 1) +  "clientModels/" + version + "/"
                end
                # Read and interpret the content of the file
                modelCode = File.readString(file.path)
                modelClass = gu @removeImports(modelCode)
                # Each class should have a proper ModelClass annotation
                modelClassAnnot = @extractAnnot(modelClass, SimiSyncModels.Model)
                if not modelClassAnnot : continue
                className = ClassCode(modelClass).name
                dbClassNames.append(className)
                classComposer = ClassComposer(className)
                clientMappers = $[]
                toLines = Object.array() # lines for function that maps server models to client
                toLines.append("[f = def ():")
                fromLines = Object.array() # lines for function that maps client models to server
                fromLines.append("[f = def (client):")
                for e in modelClass.enumerate():
                    key = e.key
                    value = modelClass.(key)
                    if value is Function:
                        if not @extractAnnot(value, SimiSyncModels.Method): continue
                        classComposer.method(value)
                    end
                    else:
                        fieldAnnot = @extractAnnot(value, SimiSyncModels.Field)
                        if not fieldAnnot or fieldAnnot.serverOnly or fieldAnnot.version > version:
                            toLines.append("@" + key + " = nil")
                            continue
                        end
                        clientMapper = fieldAnnot.clientMapper
                        fieldName = fieldAnnot.clientName ?? key
                        classComposer.field(fieldName, ?clientMapper.type ?? value)
                        if fieldName != key:
                            toLines.append("@" + fieldName + " = @" + key)
                            toLines.append("@" + key + " = nil")
                            fromLines.append("@" + key + " = client." + fieldName)
                        end
                        else: fromLines.append("@" + key + " = client." + key)
                        if clientMapper:
                            clientMappers.(fieldName) = clientMapper
                        end
                    end
                end
                if not clientMappers.isEmpty():
                    clientMappersCode = ivic clientMappers # We need to remove the trailing newline
                    classComposer.add("def mapField(name): return " + clientMappersCode.substring(0, clientMappersCode.len() - 1) + ".(name)")
                end
                clientCode = classComposer.getString()
                f = File($dirPath + className + ".simi")
                writer = WriteStream(f)
                writer.write(clientCode)
                rescue ex:
                    if ex: print ex.message
                    writer.close()
                end
                toLines.append("return ivic self")
                toLines.append("end].f")
                fromLines.append("return self")
                fromLines.append("end].f")
#                print toLines
#                print fromLines
                originalClass = gu className
                originalClass.("toClientModel") = gu String.from(toLines, "\n")
                originalClass.("fromClientModel") = gu String.from(fromLines, "\n")
            end
            NotDb.setupSingleton(dbClassNames)
        end
    end
end
